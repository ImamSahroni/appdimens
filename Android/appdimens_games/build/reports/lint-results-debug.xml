<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.13.0">

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of androidx.annotation:annotation than 1.7.1 is available: 1.9.1"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation(&quot;androidx.annotation:annotation:1.7.1&quot;)"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/bodenberg/Documentos/GitHub/AppDimens/Android/appdimens_games/build.gradle.kts"
            line="185"
            column="20"/>
    </issue>

    <issue
        id="NewerVersionAvailable"
        severity="Warning"
        message="A newer version of org.mockito:mockito-core than 5.8.0 is available: 5.20.0"
        category="Correctness"
        priority="4"
        summary="Newer Library Versions Available"
        explanation="This detector checks with a central repository to see if there are newer versions available for the dependencies used by this project. This is similar to the `GradleDependency` check, which checks for newer versions available in the Android SDK tools and libraries, but this works with any MavenCentral dependency, and connects to the library every time, which makes it more flexible but also **much** slower."
        errorLine1="    testImplementation(&quot;org.mockito:mockito-core:5.8.0&quot;)"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/bodenberg/Documentos/GitHub/AppDimens/Android/appdimens_games/build.gradle.kts"
            line="189"
            column="24"/>
    </issue>

    <issue
        id="NewerVersionAvailable"
        severity="Warning"
        message="A newer version of org.robolectric:robolectric than 4.11.1 is available: 4.16"
        category="Correctness"
        priority="4"
        summary="Newer Library Versions Available"
        explanation="This detector checks with a central repository to see if there are newer versions available for the dependencies used by this project. This is similar to the `GradleDependency` check, which checks for newer versions available in the Android SDK tools and libraries, but this works with any MavenCentral dependency, and connects to the library every time, which makes it more flexible but also **much** slower."
        errorLine1="    testImplementation(&quot;org.robolectric:robolectric:4.11.1&quot;)"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/bodenberg/Documentos/GitHub/AppDimens/Android/appdimens_games/build.gradle.kts"
            line="190"
            column="24"/>
    </issue>

    <issue
        id="Aligned16KB"
        severity="Warning"
        message="The native library `arm64-v8a/libappdimens_games.so` (from `AppDimens:appdimens_games:unspecified`) is not 16 KB aligned"
        category="Correctness"
        priority="2"
        summary="Native library dependency not 16 KB aligned"
        explanation="Android has traditionally used 4 KB memory page sizes. However, to support future devices that only work with 16 KB aligned libraries apps containing native libraries need to be built with 16 KB alignment.&#xA;&#xA;Apps with 4 KB aligned native libraries may not work correctly on devices requiring 16 KB alignment. To ensure compatibility and future-proof your app, it is strongly recommended that your native libraries are aligned to 16 KB boundaries.&#xA;&#xA;If your app uses any NDK libraries, directly or indirectly through an SDK, you should rebuild your app to meet this recommendation. Make sure all native libraries within your application, including those from dependencies, are built with 16 KB page alignment.&#xA;&#xA;This lint check looks at all native libraries that your app depends on. If any are found to be aligned to 4 KB instead of 16 KB, you will need to address this.&#xA;&#xA;When a library is flagged, first try to update to a newer version that supports 16 KB alignment. If an updated version is not available, contact the library vendor to ask about their plans for 16 KB support and request a compatible version. Updating your libraries proactively will help ensure your app works properly on a wider range of devices."
        url="https://developer.android.com/guide/practices/page-sizes"
        urls="https://developer.android.com/guide/practices/page-sizes">
        <location
            file="/home/bodenberg/.gradle/caches/8.13/transforms/75c00b2958fac769061fb5cc7f021698/transformed/out/jni/arm64-v8a/libappdimens_games.so"/>
    </issue>

    <issue
        id="Aligned16KB"
        severity="Warning"
        message="The native library `arm64-v8a/libappdimens_games.so` (from `AppDimens:appdimens_games:unspecified`) is not 16 KB aligned"
        category="Correctness"
        priority="2"
        summary="Native library dependency not 16 KB aligned"
        explanation="Android has traditionally used 4 KB memory page sizes. However, to support future devices that only work with 16 KB aligned libraries apps containing native libraries need to be built with 16 KB alignment.&#xA;&#xA;Apps with 4 KB aligned native libraries may not work correctly on devices requiring 16 KB alignment. To ensure compatibility and future-proof your app, it is strongly recommended that your native libraries are aligned to 16 KB boundaries.&#xA;&#xA;If your app uses any NDK libraries, directly or indirectly through an SDK, you should rebuild your app to meet this recommendation. Make sure all native libraries within your application, including those from dependencies, are built with 16 KB page alignment.&#xA;&#xA;This lint check looks at all native libraries that your app depends on. If any are found to be aligned to 4 KB instead of 16 KB, you will need to address this.&#xA;&#xA;When a library is flagged, first try to update to a newer version that supports 16 KB alignment. If an updated version is not available, contact the library vendor to ask about their plans for 16 KB support and request a compatible version. Updating your libraries proactively will help ensure your app works properly on a wider range of devices."
        url="https://developer.android.com/guide/practices/page-sizes"
        urls="https://developer.android.com/guide/practices/page-sizes">
        <location
            file="/home/bodenberg/.gradle/caches/8.13/transforms/75c00b2958fac769061fb5cc7f021698/transformed/out/jni/arm64-v8a/libappdimens_games.so"/>
    </issue>

    <issue
        id="Aligned16KB"
        severity="Warning"
        message="The native library `arm64-v8a/libgraphics-core.so` (from `androidx.graphics:graphics-core:1.0.0-alpha02`) is not 16 KB aligned"
        category="Correctness"
        priority="2"
        summary="Native library dependency not 16 KB aligned"
        explanation="Android has traditionally used 4 KB memory page sizes. However, to support future devices that only work with 16 KB aligned libraries apps containing native libraries need to be built with 16 KB alignment.&#xA;&#xA;Apps with 4 KB aligned native libraries may not work correctly on devices requiring 16 KB alignment. To ensure compatibility and future-proof your app, it is strongly recommended that your native libraries are aligned to 16 KB boundaries.&#xA;&#xA;If your app uses any NDK libraries, directly or indirectly through an SDK, you should rebuild your app to meet this recommendation. Make sure all native libraries within your application, including those from dependencies, are built with 16 KB page alignment.&#xA;&#xA;This lint check looks at all native libraries that your app depends on. If any are found to be aligned to 4 KB instead of 16 KB, you will need to address this.&#xA;&#xA;When a library is flagged, first try to update to a newer version that supports 16 KB alignment. If an updated version is not available, contact the library vendor to ask about their plans for 16 KB support and request a compatible version. Updating your libraries proactively will help ensure your app works properly on a wider range of devices."
        url="https://developer.android.com/guide/practices/page-sizes"
        urls="https://developer.android.com/guide/practices/page-sizes">
        <location
            file="/home/bodenberg/.gradle/caches/8.13/transforms/c3921425663daf6c60f490d1880bb633/transformed/graphics-core-1.0.0-alpha02/jni/arm64-v8a/libgraphics-core.so"/>
    </issue>

    <issue
        id="Aligned16KB"
        severity="Warning"
        message="The native library `arm64-v8a/libgraphics-core.so` (from `androidx.graphics:graphics-core:1.0.0-alpha02`) is not 16 KB aligned"
        category="Correctness"
        priority="2"
        summary="Native library dependency not 16 KB aligned"
        explanation="Android has traditionally used 4 KB memory page sizes. However, to support future devices that only work with 16 KB aligned libraries apps containing native libraries need to be built with 16 KB alignment.&#xA;&#xA;Apps with 4 KB aligned native libraries may not work correctly on devices requiring 16 KB alignment. To ensure compatibility and future-proof your app, it is strongly recommended that your native libraries are aligned to 16 KB boundaries.&#xA;&#xA;If your app uses any NDK libraries, directly or indirectly through an SDK, you should rebuild your app to meet this recommendation. Make sure all native libraries within your application, including those from dependencies, are built with 16 KB page alignment.&#xA;&#xA;This lint check looks at all native libraries that your app depends on. If any are found to be aligned to 4 KB instead of 16 KB, you will need to address this.&#xA;&#xA;When a library is flagged, first try to update to a newer version that supports 16 KB alignment. If an updated version is not available, contact the library vendor to ask about their plans for 16 KB support and request a compatible version. Updating your libraries proactively will help ensure your app works properly on a wider range of devices."
        url="https://developer.android.com/guide/practices/page-sizes"
        urls="https://developer.android.com/guide/practices/page-sizes">
        <location
            file="/home/bodenberg/.gradle/caches/8.13/transforms/c3921425663daf6c60f490d1880bb633/transformed/graphics-core-1.0.0-alpha02/jni/arm64-v8a/libgraphics-core.so"/>
    </issue>

    <issue
        id="Aligned16KB"
        severity="Warning"
        message="The native library `arm64-v8a/libgraphics-core.so` (from `androidx.graphics:graphics-core:1.0.0-alpha02`) is not 16 KB aligned"
        category="Correctness"
        priority="2"
        summary="Native library dependency not 16 KB aligned"
        explanation="Android has traditionally used 4 KB memory page sizes. However, to support future devices that only work with 16 KB aligned libraries apps containing native libraries need to be built with 16 KB alignment.&#xA;&#xA;Apps with 4 KB aligned native libraries may not work correctly on devices requiring 16 KB alignment. To ensure compatibility and future-proof your app, it is strongly recommended that your native libraries are aligned to 16 KB boundaries.&#xA;&#xA;If your app uses any NDK libraries, directly or indirectly through an SDK, you should rebuild your app to meet this recommendation. Make sure all native libraries within your application, including those from dependencies, are built with 16 KB page alignment.&#xA;&#xA;This lint check looks at all native libraries that your app depends on. If any are found to be aligned to 4 KB instead of 16 KB, you will need to address this.&#xA;&#xA;When a library is flagged, first try to update to a newer version that supports 16 KB alignment. If an updated version is not available, contact the library vendor to ask about their plans for 16 KB support and request a compatible version. Updating your libraries proactively will help ensure your app works properly on a wider range of devices."
        url="https://developer.android.com/guide/practices/page-sizes"
        urls="https://developer.android.com/guide/practices/page-sizes">
        <location
            file="/home/bodenberg/.gradle/caches/8.13/transforms/c3921425663daf6c60f490d1880bb633/transformed/graphics-core-1.0.0-alpha02/jni/arm64-v8a/libgraphics-core.so"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields (static reference to `AppDimensGames` which has field `context` pointing to `Context`); this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="        @Volatile"
        errorLine2="        ^">
        <location
            file="/home/bodenberg/Documentos/GitHub/AppDimens/Android/appdimens_games/src/main/java/com/appdimens/games/AppDimensGames.kt"
            line="198"
            column="9"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields (static reference to `AppDimensGames3D` which has field `context` pointing to `Context`); this is a memory leak"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1="        @Volatile"
        errorLine2="        ^">
        <location
            file="/home/bodenberg/Documentos/GitHub/AppDimens/Android/appdimens_games/src/main/java/com/appdimens/games/AppDimensGames3D.kt"
            line="206"
            column="9"/>
    </issue>

    <issue
        id="UseTomlInstead"
        severity="Warning"
        message="Use version catalog instead"
        category="Productivity"
        priority="4"
        summary="Use TOML Version Catalog Instead"
        explanation="If your project is using a `libs.versions.toml` file, you should place all Gradle dependencies in the TOML file. This lint check looks for version declarations outside of the TOML file and suggests moving them (and in the IDE, provides a quickfix to performing the operation automatically)."
        errorLine1="    implementation(&quot;androidx.annotation:annotation:1.7.1&quot;)"
        errorLine2="                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/bodenberg/Documentos/GitHub/AppDimens/Android/appdimens_games/build.gradle.kts"
            line="185"
            column="20"/>
    </issue>

    <issue
        id="UseTomlInstead"
        severity="Warning"
        message="Use version catalog instead"
        category="Productivity"
        priority="4"
        summary="Use TOML Version Catalog Instead"
        explanation="If your project is using a `libs.versions.toml` file, you should place all Gradle dependencies in the TOML file. This lint check looks for version declarations outside of the TOML file and suggests moving them (and in the IDE, provides a quickfix to performing the operation automatically)."
        errorLine1="    testImplementation(&quot;org.mockito:mockito-core:5.8.0&quot;)"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/bodenberg/Documentos/GitHub/AppDimens/Android/appdimens_games/build.gradle.kts"
            line="189"
            column="24"/>
    </issue>

    <issue
        id="UseTomlInstead"
        severity="Warning"
        message="Use version catalog instead"
        category="Productivity"
        priority="4"
        summary="Use TOML Version Catalog Instead"
        explanation="If your project is using a `libs.versions.toml` file, you should place all Gradle dependencies in the TOML file. This lint check looks for version declarations outside of the TOML file and suggests moving them (and in the IDE, provides a quickfix to performing the operation automatically)."
        errorLine1="    testImplementation(&quot;org.robolectric:robolectric:4.11.1&quot;)"
        errorLine2="                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/bodenberg/Documentos/GitHub/AppDimens/Android/appdimens_games/build.gradle.kts"
            line="190"
            column="24"/>
    </issue>

</issues>
